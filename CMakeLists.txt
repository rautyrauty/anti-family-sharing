cmake_minimum_required(VERSION 3.14)
set(GCC_COVERAGE_COMPILE_FLAGS "-m32")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}")
project(AntiFamilySharing LANGUAGES CXX)
message(STATUS "the build of the ${PROJECT_NAME} has begun. CMake version: ${CMAKE_VERSION}")

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(${CMAKE_VERSION} VERSION_GREATER_EQUAL "3.27.0")
    cmake_policy(SET CMP0144 NEW)
endif()
if(NOT DEFINED OPENSSL_ROOT_DIR OR NOT OPENSSL_ROOT_DIR)
    if(WIN32)
        set(OPENSSL_ROOT_DIR "D:/Qt/Tools/OpenSSLv3/Win_x32")
    elseif(LINUX)
        set(OPENSSL_ROOT_DIR "/usr/lib/ssl")
    endif()
endif()
if(NOT EXISTS ${OPENSSL_ROOT_DIR})
    message(FATAL_ERROR "OPENSSL_ROOT_DIR ${OPENSSL_ROOT_DIR} NOT EXISTS")
endif()

if(NOT DEFINED BOOST_ROOT OR NOT BOOST_ROOT)
    if(WIN32)
        set(BOOST_ROOT "D:/boost_1_82_0/boost_mingw_810_x32")
    elseif(LINUX)
        set(BOOST_ROOT "/usr/include/boost")
    endif()
endif()
if(NOT EXISTS ${BOOST_ROOT})
    message(FATAL_ERROR "BOOST_ROOT ${BOOST_ROOT} NOT EXISTS")
endif()

if(NOT DEFINED GMOD_MODULE_BASE_DIR OR NOT GMOD_MODULE_BASE_DIR)
    if(WIN32)
        set(GMOD_MODULE_BASE_DIR "D:/repositories/gmod-module-base-development")
    elseif(LINUX)
        set(GMOD_MODULE_BASE_DIR "/mnt/d/repositories/gmod-module-base-development")
    endif()
endif()
if(NOT EXISTS ${GMOD_MODULE_BASE_DIR})
    message(FATAL_ERROR "GMOD_MODULE_BASE_DIR ${GMOD_MODULE_BASE_DIR} NOT EXISTS")
endif()

add_library(${PROJECT_NAME} SHARED)
target_sources(${PROJECT_NAME} PRIVATE main.cpp anti-family-sharing.cpp anti-family-sharing.h ini.h json.hpp)

FIND_PACKAGE( Boost REQUIRED)
message(STATUS "Boost include dir: ${Boost_INCLUDE_DIR}")
INCLUDE_DIRECTORIES( ${Boost_INCLUDE_DIR} )

find_package(OpenSSL REQUIRED)
message(STATUS "OpenSSL include dir ${OPENSSL_INCLUDE_DIR}")
include_directories(${OPENSSL_INCLUDE_DIR})

add_subdirectory(${GMOD_MODULE_BASE_DIR}/include ${GMOD_MODULE_BASE_DIR}/include/build)
if(WIN32)
    target_link_libraries(${PROJECT_NAME} ws2_32)
endif()
target_link_libraries(${PROJECT_NAME} ${Boost_LIBRARIES})
target_link_libraries(${PROJECT_NAME} ${CMAKE_DL_LIBS} OpenSSL::SSL OpenSSL::Crypto)
target_link_libraries(${PROJECT_NAME} gmod-module-base)

set_gmod_suffix_prefix(${PROJECT_NAME})
